{"name":"Practical Machine Learning Prediction Assignment","tagline":"","body":"## Background\r\n\r\nUsing devices such as Jawbone Up, Nike FuelBand, and Fitbit it is now possible to collect a large amount of data about personal activity relatively inexpensively. These type of devices are part of the quantified self movement - a group of enthusiasts who take measurements about themselves regularly to improve their health, to find patterns in their behavior, or because they are tech geeks. One thing that people regularly do is quantify how much of a particular activity they do, but they rarely quantify how well they do it. In this project, your goal will be to use data from accelerometers on the belt, forearm, arm, and dumbell of 6 participants. They were asked to perform barbell lifts correctly and incorrectly in 5 different ways. More information is available from the website here: http://groupware.les.inf.puc-rio.br/har (see the section on the Weight Lifting Exercise Dataset). \r\n\r\n\r\n## Getting, partioning and cleaning the data\r\n\r\nThe training and testing data sets can be found on the following URLs:\r\n\r\n```{r}\r\ntrainUrl <- \"http://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv\"\r\n\r\ntestUrl <- \"http://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv\"\r\n```\r\n\r\n\r\nLoad data to memory\r\n```{r}\r\ntraining <- read.csv(url(trainUrl), na.strings=c(\"NA\",\"#DIV/0!\",\"\"))\r\ntesting <- read.csv(url(testUrl), na.strings=c(\"NA\",\"#DIV/0!\",\"\"))\r\n```\r\n\r\n\r\nPartioning Training data set into two data sets, 60% for myTraining, 40% for myTesting:\r\n\r\n```{r}\r\nlibrary(caret)\r\nlibrary(rpart)\r\nlibrary(rpart.plot)\r\nlibrary(RColorBrewer)\r\nlibrary(rattle)\r\nlibrary(randomForest)\r\n\r\ninTrain <- createDataPartition(y=training$classe, p=0.6, list=FALSE)\r\nmyTraining <- training[inTrain, ]; myTesting <- training[-inTrain, ]\r\ndim(myTraining); dim(myTesting)\r\n```\r\n\r\nThe following transformations were used to clean the data:\r\n\r\nTransformation 1: Cleaning NearZeroVariance Variables\r\nRun this code to view possible NZV Variables:\r\n```{r}\r\n\r\nmyDataNZV <- nearZeroVar(myTraining, saveMetrics=TRUE)\r\n```\r\n\r\nRun this code to create another subset without NZV variables:\r\n\r\n```{r}\r\nmyNZVvars <- names(myTraining) %in% c(\"new_window\", \"kurtosis_roll_belt\", \"kurtosis_picth_belt\",\r\n\"kurtosis_yaw_belt\", \"skewness_roll_belt\", \"skewness_roll_belt.1\", \"skewness_yaw_belt\",\r\n\"max_yaw_belt\", \"min_yaw_belt\", \"amplitude_yaw_belt\", \"avg_roll_arm\", \"stddev_roll_arm\",\r\n\"var_roll_arm\", \"avg_pitch_arm\", \"stddev_pitch_arm\", \"var_pitch_arm\", \"avg_yaw_arm\",\r\n\"stddev_yaw_arm\", \"var_yaw_arm\", \"kurtosis_roll_arm\", \"kurtosis_picth_arm\",\r\n\"kurtosis_yaw_arm\", \"skewness_roll_arm\", \"skewness_pitch_arm\", \"skewness_yaw_arm\",\r\n\"max_roll_arm\", \"min_roll_arm\", \"min_pitch_arm\", \"amplitude_roll_arm\", \"amplitude_pitch_arm\",\r\n\"kurtosis_roll_dumbbell\", \"kurtosis_picth_dumbbell\", \"kurtosis_yaw_dumbbell\", \"skewness_roll_dumbbell\",\r\n\"skewness_pitch_dumbbell\", \"skewness_yaw_dumbbell\", \"max_yaw_dumbbell\", \"min_yaw_dumbbell\",\r\n\"amplitude_yaw_dumbbell\", \"kurtosis_roll_forearm\", \"kurtosis_picth_forearm\", \"kurtosis_yaw_forearm\",\r\n\"skewness_roll_forearm\", \"skewness_pitch_forearm\", \"skewness_yaw_forearm\", \"max_roll_forearm\",\r\n\"max_yaw_forearm\", \"min_roll_forearm\", \"min_yaw_forearm\", \"amplitude_roll_forearm\",\r\n\"amplitude_yaw_forearm\", \"avg_roll_forearm\", \"stddev_roll_forearm\", \"var_roll_forearm\",\r\n\"avg_pitch_forearm\", \"stddev_pitch_forearm\", \"var_pitch_forearm\", \"avg_yaw_forearm\",\r\n\"stddev_yaw_forearm\", \"var_yaw_forearm\")\r\nmyTraining <- myTraining[!myNZVvars]\r\n#To check the new N?? of observations\r\ndim(myTraining)\r\n```\r\n\r\nTransformation 2: Killing first column of Dataset - ID\r\nRemoving first ID variable so that it does not interfer with ML Algorithms:\r\n\r\n```{r}\r\nmyTraining <- myTraining[c(-1)]\r\n```\r\n\r\nTransformation 3: Cleaning Variables with too many NAs.\r\nFor Variables that have more than a 60% threshold of NA's I'm going to leave them out:\r\n\r\n\r\n```{r}\r\n\r\ntrainingV3 <- myTraining #creating another subset to iterate in loop\r\nfor(i in 1:length(myTraining)) { #for every column in the training dataset\r\n        if( sum( is.na( myTraining[, i] ) ) /nrow(myTraining) >= .6 ) { #if n?? NAs > 60% of total observations\r\n\t\tfor(j in 1:length(trainingV3)) {\r\n\t\t\tif( length( grep(names(myTraining[i]), names(trainingV3)[j]) ) ==1)  { #if the columns are the same:\r\n\t\t\t\ttrainingV3 <- trainingV3[ , -j] #Remove that column\r\n\t\t\t}\t\r\n\t\t} \r\n\t}\r\n}\r\n#To check the new N?? of observations\r\ndim(trainingV3)\r\n\r\n#Seting back to our set:\r\nmyTraining <- trainingV3\r\nrm(trainingV3)\r\n```\r\n\r\nNow let us do the exact same 3 transformations but for our myTesting and testing data sets.\r\n\r\n```{r}\r\nclean1 <- colnames(myTraining)\r\nclean2 <- colnames(myTraining[, -58]) #already with classe column removed\r\nmyTesting <- myTesting[clean1]\r\ntesting <- testing[clean2]\r\n\r\n#To check the new N?? of observations\r\ndim(myTesting)\r\n\r\n#To check the new N?? of observations\r\ndim(testing)\r\n\r\n#Note: The last column - problem_id - which is not equal to training sets, was also \"automagically\" removed\r\n#No need for this code:\r\n#testing <- testing[-length(testing)]\r\n```\r\n\r\nIn order to ensure proper functioning of Decision Trees and especially RandomForest Algorithm with the Test data set (data set provided), we need to coerce the data into the same type.\r\n\r\n```{r}\r\nfor (i in 1:length(testing) ) {\r\n        for(j in 1:length(myTraining)) {\r\n\t\tif( length( grep(names(myTraining[i]), names(testing)[j]) ) ==1)  {\r\n\t\t\tclass(testing[j]) <- class(myTraining[i])\r\n\t\t}      \r\n\t}      \r\n}\r\n#And to make sure Coertion really worked, simple smart ass technique:\r\ntesting <- rbind(myTraining[2, -58] , testing) #note row 2 does not mean anything, this will be removed right.. now:\r\ntesting <- testing[-1,]\r\n```\r\n\r\n## Using ML algorithms for prediction: Decision Tree\r\n\r\n```{r}\r\nmodFitA1 <- rpart(classe ~ ., data=myTraining, method=\"class\")\r\n\r\nfancyRpartPlot(modFitA1)\r\n```\r\n\r\nPredicting:\r\n\r\n```{r}\r\npredictionsA1 <- predict(modFitA1, myTesting, type = \"class\")\r\n```\r\n\r\nUsing confusion Matrix to test results:\r\n```{r}\r\nconfusionMatrix(predictionsA1, myTesting$classe)\r\n#Overall Statistics\r\n                                          \r\n#               Accuracy : 0.8683          \r\n#                 95% CI : (0.8607, 0.8757)\r\n#    No Information Rate : 0.2845          \r\n#    P-Value [Acc > NIR] : < 2.2e-16       \r\n                                          \r\n#                  Kappa : 0.8335 \r\n```\r\n\r\n## Using ML algorithms for prediction: Random Forests\r\n\r\n```{r}\r\nmodFitB1 <- randomForest(classe ~. , data=myTraining)\r\n```\r\n\r\nPredicting:\r\n```{r}\r\npredictionsB1 <- predict(modFitB1, myTesting, type = \"class\")\r\n```\r\nUsing confusion Matrix to test results:\r\n```{r}\r\nconfusionMatrix(predictionsB1, myTesting$classe)\r\n\r\n#Overall Statistics\r\n                                         \r\n #              Accuracy : 0.999          \r\n #                95% CI : (0.998, 0.9996)\r\n #   No Information Rate : 0.2845         \r\n #   P-Value [Acc > NIR] : < 2.2e-16      \r\n                                         \r\n #                 Kappa : 0.9987         \r\n #Mcnemar's Test P-Value : NA \r\n\r\n\r\n```\r\nRandom Forests yielded better Results, as expected!\r\n\r\n## Generating Files to submit as answers for the Assignment:\r\n\r\nFinally, using the provided Test Set out-of-sample error:\r\n\r\nFor Random Forests is, which yielded a much better prediction:\r\n\r\n```{r}\r\npredictionsB2 <- predict(modFitB1, testing, type = \"class\")\r\n```\r\n\r\nFunction to generate files with predictions to submit for assignment\r\n```{r}\r\n\r\npml_write_files = function(x){\r\n  n = length(x)\r\n  for(i in 1:n){\r\n    filename = paste0(\"problem_id_\",i,\".txt\")\r\n    write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)\r\n  }\r\n}\r\n\r\npml_write_files(predictionsB2)\r\n\r\n```","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}